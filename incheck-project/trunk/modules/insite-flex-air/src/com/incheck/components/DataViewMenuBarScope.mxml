<?xml version="1.0" encoding="utf-8"?>
<s:HGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:commn="com.incheck.common.*"
		  width="100%"
		  creationComplete="initMenu()">

	
	<fx:Script>
		<![CDATA[
			
			import com.incheck.IIncheckChart;
			import com.incheck.IncheckModel;
			import com.incheck.common.DataViewCursorTypes;
			import com.incheck.common.DataViewScalingTypes;
			
			import mx.events.MenuEvent;


			private var _chart:IIncheckChart;


			private function initMenu():void
			{
				setMenuItemsToUserPreferences();
			}


			public function get chart():IIncheckChart
			{
				return _chart;
			}

			public function set chart(value:IIncheckChart):void
			{
				_chart = value;
			}

			private function menuItemEventHandler(event:MenuEvent):void
			{
				switch ((event.item as MenuItem).label)
				{
					case "Acceleration":
					{
						IncheckModel.instance().setGraphSelectionScope('accel');
						break;
					}
					case "Velocity":
					{
						IncheckModel.instance().setGraphSelectionScope('velo');
						break;
					}
					case "Displacement":
					{
						IncheckModel.instance().setGraphSelectionScope('disp');
						break;
					}
					case "Bearing Demodulation":
					{
						IncheckModel.instance().setGraphSelectionScope('brndem');
						break;
					}
					case "Waveform":
					{
						IncheckModel.instance().setFunctionSelectionScope('wave');
						break;
					}
					case "Spectrum":
					{
						IncheckModel.instance().setFunctionSelectionScope('spec')
						break;
					}
					case "Disabled":
					{
						if (event.item.group == "curs")
						{	
							IncheckModel.instance().setCursorSelectionScope(DataViewCursorTypes.Disabled);
						}	
						if (event.item.group == "scaling")
						{	
							IncheckModel.instance().setScalingSelectionScope(DataViewScalingTypes.Disabled);
						}	
						break;
					}
					case "Single":
					{
						IncheckModel.instance().setCursorSelectionScope(DataViewCursorTypes.Single);
						break;
					}
					case "Double":
					{
						IncheckModel.instance().setCursorSelectionScope(DataViewCursorTypes.Double);
						break;
					}
					case "Harmonic":
					{
						IncheckModel.instance().setCursorSelectionScope(DataViewCursorTypes.Harmonic);
						break;
					}
					case "Sideband":
					{
						IncheckModel.instance().setCursorSelectionScope(DataViewCursorTypes.Sideband);
						break;
					}
					case "Peaks":
					{
						IncheckModel.instance().setCursorSelectionScope(DataViewCursorTypes.PeakFinder);
						break;
					}
					case "HZoom":
					{
						IncheckModel.instance().setScalingSelectionScope(DataViewScalingTypes.HZoom);
						break;
					}
					case "VZoom":
					{
						IncheckModel.instance().setScalingSelectionScope(DataViewScalingTypes.VZoom);
						break;
					}
					case "Pan":
					{
						IncheckModel.instance().setScalingSelectionScope(DataViewScalingTypes.Pan);
						break;
					}
					case "Reset":
					{
						(IncheckModel.instance().right as RightNavigator).autoscaleScope.selected = false;
						chart.resetVerticalZoom();
						chart.resetHorizontalZoom();
						zreset.toggled = false;
						break;
					}
					case "Peak":
					{
						IncheckModel.instance().MesTypeScope = 'Peak';
						break;
					}
					case "RMS":
					{
						IncheckModel.instance().MesTypeScope = 'RMS';
						break;
					}
					case "g":
					{
						IncheckModel.instance().AccEUnit = 'AccG';
						chart.regenLineSeriesWithZoomReset();
						chart.regenLineSeriesWithZoomReset();
						break;
					}
					case "in/s²":
					{
						IncheckModel.instance().AccEUnit = 'AccInSec2';
						chart.regenLineSeriesWithZoomReset();
						break;
					}
					case "m/s²":
					{
						IncheckModel.instance().AccEUnit = 'AccMtrPerSec2';
						chart.regenLineSeriesWithZoomReset();
						break;
					}
					case "mm/s²":
					{
						IncheckModel.instance().AccEUnit = 'AccMmSec2';
						chart.regenLineSeriesWithZoomReset();
						break;
					}
					case "dB":
					{
						if (event.item.group == "Acceleration")
						{
							IncheckModel.instance().AccEUnit = 'AccDb';
						}
						if (event.item.group == "Velocity")
						{
							IncheckModel.instance().VelEUnit = 'VelDb';
						}
						chart.regenLineSeriesWithZoomReset();
						break;
					}
					case "in/s":
					{
						IncheckModel.instance().VelEUnit = 'VelInSec';
						chart.regenLineSeriesWithZoomReset();
						break;
					}
					case "m/s":
					{
						IncheckModel.instance().VelEUnit = 'VelMtrSec';
						chart.regenLineSeriesWithZoomReset();
						break;
					}
					case "mm/s":
					{
						IncheckModel.instance().VelEUnit = 'VelMmSec';
						chart.regenLineSeriesWithZoomReset();
						break;
					}
					case "mil":
					{
						IncheckModel.instance().DispEUnit = 'DisplMil';
						chart.regenLineSeriesWithZoomReset();
						break;
					}
					case "mm":
					{
						IncheckModel.instance().DispEUnit = 'DisplMm';
						chart.regenLineSeriesWithZoomReset();
						break;
					}
					case "Hz":
					{
						IncheckModel.instance().FreqEUnit = 'FreqHz';
						chart.regenLineSeriesWithZoomReset();
						break;
					}
					case "CPM":
					{
						IncheckModel.instance().FreqEUnit = 'FreqCPM';
						chart.regenLineSeriesWithZoomReset();
						break;
					}
					case "s":
					{
						IncheckModel.instance().TimeEUnit = 'TimeSec';
						chart.regenLineSeriesWithZoomReset();
						break;
					}
					case "ms":
					{
						IncheckModel.instance().TimeEUnit = 'TimeMiliSec';
						chart.regenLineSeriesWithZoomReset();
						break;
					}
					case "°C":
					{
						IncheckModel.instance().TempEUnit = 'TempC';
						break;
					}
					case "°F":
					{
						IncheckModel.instance().TempEUnit = 'TempF';
						break;
					}
					case "None":
					{
						IncheckModel.instance().averaging = '';
						break;
					}
					case "Linear":
					{
						IncheckModel.instance().averaging = 'linear';
						break;
					}
					case "Exponential":
					{
						IncheckModel.instance().averaging = 'exponential';
						break;
					}
					case "Peak Hold":
					{
						IncheckModel.instance().averaging = 'peak';
						break;
					}
					default:
					{
						break;
					}
				}
			}


			public function setMenuItemsToUserPreferences():void
			{
				setMenuItemWithLabel(accelerationUnitsMenu, IncheckModel.instance().getUserAccelerationUnits());
				setMenuItemWithLabel(velocityUnitsMenu, IncheckModel.instance().getUserVelocityUnits());
				setMenuItemWithLabel(displacementUnitsMenu, IncheckModel.instance().getUserDisplacementUnits());
				setMenuItemWithLabel(frequencyUnitsMenu, IncheckModel.instance().getUserFrequencyUnits());
				setMenuItemWithLabel(timeUnitsMenu, IncheckModel.instance().getUserTimeUnits());
				setMenuItemWithLabel(temperatureUnitsMenu, IncheckModel.instance().getUserTemperatureUnits());
				//setMenuItemWithLabel(pressureUnitsMenu, IncheckModel.instance().getUserPressureUnits());
				setMenuItemWithLabel(graphMenu, IncheckModel.instance().getUserVibrationType());
				setMenuItemWithLabel(measurementTypeMenu, IncheckModel.instance().getUserMeasurementType());
			}


			private function setMenuItemWithLabel(menu:MenuItem, label:String):void
			{
				for each (var menuItem:MenuItem in menu.children)
				{
					if (menuItem.label == label)
					{
						if (!menuItem.toggled)
						{
							menuItem.toggled = true;
							// manually execute the menuItemEventHandler method with a menuEvent that has the information as if the user had clicked the menuItem
							var menuEvent:MenuEvent = new MenuEvent(MenuEvent.ITEM_CLICK, false, true, menuBar, null, menuItem);
							menuItemEventHandler(menuEvent);
						}
					}
					else
					{
						if (menuItem.toggled)
							menuItem.toggled = false;
					}
				}
			}

		]]>
	</fx:Script>

	
	<mx:MenuBar id="menuBar" itemClick="menuItemEventHandler(event)"
				showRoot="false">
		
		<commn:MenuItem id="rootMenu">
			
			<commn:MenuItem id="graphMenu" label="Function">
				
				<commn:MenuItem id="accel" label="Acceleration" group="graph"
								toggled="true" type="radio"/>

				<commn:MenuItem id="velo" label="Velocity" group="graph"
								toggled="false" type="radio"/>
				
			</commn:MenuItem>

			<!--commn:MenuItem id="functionMenu"
							label="Graph">
			
				<commn:MenuItem id="wave"
								label="Waveform"
								type="radio"
								group="func"
								toggled="false"/>

				<commn:MenuItem id="spec"
								label="Spectrum"
								type="radio"
								group="func"
								toggled="true"/>
			</commn:MenuItem-->

			<commn:MenuItem id="cursorMenu" label="Cursor">
				
				<commn:MenuItem id="dis" label="Disabled" group="curs"
								toggled="true" type="radio"/>

				<commn:MenuItem id="cursOne" label="Single" group="curs"
								toggled="false" type="radio"/>

				<commn:MenuItem id="cursTwo" label="Double" group="curs"
								toggled="false" type="radio"/>

				<commn:MenuItem label="Harmonic" group="curs" toggled="false"
								type="radio"/>

				<commn:MenuItem label="Sideband" group="curs" toggled="false"
								type="radio"/>

				<commn:MenuItem label="Peaks" group="curs" toggled="false"
								type="radio"/>
			</commn:MenuItem>

			<commn:MenuItem id="Scaling" label="Scaling">
				
				<commn:MenuItem id="nocurs" label="Disabled" group="scaling"
								toggled="true" type="radio"/>

				<commn:MenuItem id="hzoom" label="HZoom" group="scaling"
								toggled="false" type="radio"/>

				<commn:MenuItem id="vzoom" label="VZoom" group="scaling"
								toggled="false" type="radio"/>

				<commn:MenuItem id="panzoom" label="Pan" group="scaling"
								toggled="false" type="radio"/>

				<commn:MenuItem id="zreset" label="Reset" group="scaling"
								toggled="false" type="radio"/>
			</commn:MenuItem>

			<commn:MenuItem id="averaging" label="Averaging">
				
				<commn:MenuItem id="none" label="None" group="averages"
								type="radio" toggled="true" />
				
				<commn:MenuItem id="linear" label="Linear" group="averages"
								type="radio" toggled="false" />
				
				<commn:MenuItem id="exponential" label="Exponential"
								group="averages" type="radio" toggled="false" />
				
				<commn:MenuItem id="peak" label="Peak Hold"
								group="averages" type="radio" toggled="false" />
			</commn:MenuItem>
			
			<commn:MenuItem label="Units">
				
				<commn:MenuItem id="measurementTypeMenu" label="Measurement Type">
					
					<commn:MenuItem label="Peak" group="MesType" toggled="true"
									type="radio"/>

					<commn:MenuItem label="RMS" group="MesType" toggled="false"
									type="radio"/>
				</commn:MenuItem>

				<commn:MenuItem id="accelerationUnitsMenu" label="Acceleration">
					<commn:MenuItem label="g" group="Acceleration" toggled="true"
									type="radio"/>

					<commn:MenuItem label="in/s\u00B2"
									group="Acceleration" toggled="false"
									type="radio"/>

					<commn:MenuItem label="m/s\u00B2"
									group="Acceleration" toggled="false"
									type="radio"/>

					<commn:MenuItem label="mm/s\u00B2"
									group="Acceleration" toggled="false"
									type="radio"/>

					<commn:MenuItem label="dB" group="Acceleration"
									toggled="false" type="radio"/>
				</commn:MenuItem>

				<commn:MenuItem id="velocityUnitsMenu" label="Velocity">
					<commn:MenuItem label="in/s" group="Velocity" toggled="true"
									type="radio"/>

					<commn:MenuItem label="m/s" group="Velocity" toggled="false"
									type="radio"/>

					<commn:MenuItem label="mm/s" group="Velocity" toggled="false"
									type="radio"/>

					<commn:MenuItem label="dB" group="Velocity" toggled="false"
									type="radio"/>
					
				</commn:MenuItem>

				<commn:MenuItem id="displacementUnitsMenu" label="Displacement">
					
					<commn:MenuItem label="mil" group="Displacement"
									toggled="true" type="radio"/>

					<commn:MenuItem label="mm" group="Displacement"
									toggled="false" type="radio"/>
					
				</commn:MenuItem>

				<commn:MenuItem id="frequencyUnitsMenu" label="Frequency">
					
					<commn:MenuItem label="Hz" group="Frequency" toggled="true"
									type="radio"/>

					<commn:MenuItem label="CPM" group="Frequency" toggled="false"
									type="radio"/>
					
				</commn:MenuItem>

				<commn:MenuItem id="timeUnitsMenu" label="Time">
					
					<commn:MenuItem label="s" group="Time" toggled="true"
									type="radio"/>

					<commn:MenuItem label="ms" group="Time" toggled="false"
									type="radio"/>
					
				</commn:MenuItem>

				<commn:MenuItem id="temperatureUnitsMenu" label="Temperature">
					
					<commn:MenuItem label="\u00B0C"
									group="Temperature" toggled="true"
									type="radio"/>

					<commn:MenuItem label="\u00B0F"
									group="Temperature" toggled="false"
									type="radio"/>
				</commn:MenuItem>
				
			</commn:MenuItem>
			
		</commn:MenuItem>
		
	</mx:MenuBar>


	<s:Group width="100%" />

	
	<s:HGroup id="extraCursors" visible="false"
			 includeInLayout="{extraCursors.visible}">
		
		<s:Label id="extraCursLabel" 
				 top="10"
				 text="Number of Cursors: "/>

		<!--mx:NumericStepper id="numOfExtraCursors" change="chart.invalidate()"
						   click="chart.invalidate()"
						   creationComplete="numOfExtraCursors.mx_internal::inputField.editable=false"
						   dataChange="chart.invalidate()" maximum="50"
						   minimum="1" mouseMove="chart.invalidate()" value="8"/-->

		<s:NumericStepper id="numOfExtraCursors"
						  maximum="50" minimum="1" value="8" 
						  change="chart.regenLineSeries()" />
		
	</s:HGroup>
	
</s:HGroup>
