<?xml version="1.0" encoding="utf-8"?>
<mx:HBox xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:commn="com.incheck.common.*"
	creationComplete="initHistoryMenu();"
	horizontalGap="10">
	<fx:Script>
		<![CDATA[
			import com.incheck.Constants;
			import com.incheck.IncheckModel;
			import com.incheck.common.DataViewScalingTypes;
			
			import mx.collections.ArrayCollection;
			import mx.events.MenuEvent;
			import mx.messaging.Channel;
			import mx.messaging.ChannelSet;
			import mx.messaging.channels.AMFChannel;
			import mx.messaging.channels.RTMPChannel;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.remoting.RemoteObject;
			
			private var parameters:ArrayCollection;
			private var bands:ArrayCollection;
			
			private var dateRanges:Array = [];
			[Bindable]
			private var currentDateRange:Number = 0;
			
			public function get fromDate():Date {
				return dateRanges[currentDateRange].from;
			}
			
			public function get toDate():Date {
				return dateRanges[currentDateRange].to;
			}
			
			public function initHistoryMenu():void {
    			//getParameters();
    			getBand();
				var dateTo:Date = new Date();
    			histToDate.selectedDate = dateTo;
    			var dateFrom:Date = new Date() 
				dateFrom.month -= 2;
    			histFromDate.selectedDate = dateFrom;
				dateRanges[currentDateRange] = {from: histFromDate.selectedDate, to: dateTo};

				setMenuItemsToUserPreferences();
			}
    		
//    		private function getParameters():void {
//    			var ro:RemoteObject = new RemoteObject("icNodes");
//				ro.addEventListener(ResultEvent.RESULT, this.getParMenuCallBack);
//				ro.addEventListener(FaultEvent.FAULT, this.histError);
//				ro.getParamatersForHistoryMenu();
//    		}
    		
//    		private function getParMenuCallBack(event:ResultEvent):void {
//    			parameters = event.result as ArrayCollection;
//    			parameterMenu.children = [];
//    			var menuItem:MenuItem;
//    			for each (var parameter:String in parameters) {
//    				menuItem = new MenuItem();
//    				menuItem.label = parameter;
//    				menuItem.type = "radio";
//    				menuItem.group = "overalls";
//    				menuItem.toggled = false;
//    				parameterMenu.addChild(menuItem);
//    			}
//    			(parameterMenu.getChildAt(0) as MenuItem).toggled = true;
//				IncheckModel.instance().historyParameter = parameters.getItemAt(0) as String;
//    		}
    		
//    		private function onParameterChanged(event:MenuEvent):void {
//    			var menuItem:MenuItem = event.item as MenuItem;
//    			
//    			// TODO change this
//    			IncheckModel.instance().historyParameter=menuItem.label;
//    			IncheckModel.instance().right.historyChart.refreshData();
//    		}

    		private function getBand():void {
    			var ro:RemoteObject = new RemoteObject("icNodes");
				
				var cs:ChannelSet = new ChannelSet();
				var customChannel:Channel = new RTMPChannel(Constants.SERVICE_ID, Constants.SERVICE_URL);
				cs.addChannel(customChannel);
				ro.channelSet = cs;

				ro.addEventListener(ResultEvent.RESULT, getBandMenuCallBack, false, 0, true);
				ro.addEventListener(FaultEvent.FAULT, histError, false, 0, true);
				ro.getBandForHistoryMenu();
    		}
    		
    		private function getBandMenuCallBack(event:ResultEvent):void {
    			bands = event.result as ArrayCollection;
    			bandMenu.children = [];
    			var menuItem:MenuItem;
    			for each (var band:Object in bands) {
    				menuItem = new MenuItem();
    				menuItem.label = band.bandName;
    				menuItem.type = "radio";
    				menuItem.group = "bands";
    				menuItem.toggled = false;
    				bandMenu.addChild(menuItem);
    			}
    			(bandMenu.getChildAt(0) as MenuItem).toggled = true;
				IncheckModel.instance().historyBand = bands.getItemAt(0);
    		}
    		
    		private function onBandChanged(event:MenuEvent):void{
    			var menuItem:MenuItem = event.item as MenuItem;
    			var ind:int = bandMenu.getChildIndex(menuItem);
    			
    			// TODO change this
    			IncheckModel.instance().historyBand = bands.getItemAt(ind);
				(IncheckModel.instance().right as RightNavigator).historyChart.refreshData();
    		}
    		
    		private function histError(event:FaultEvent):void {
    			trace("Error getting parameters or band for menu");
    		}
			
			public function updateDateRanges(fromDate:Date, toDate:Date):void {
				histFromDate.selectedDate = fromDate;
				histToDate.selectedDate = toDate;
				currentDateRange++;
				dateRanges[currentDateRange] = {from: fromDate, to: toDate};
				(IncheckModel.instance().right as RightNavigator).historyChart.dateRangeChanged();
			}
			
			private function onDateChaged():void {
				currentDateRange++;
				dateRanges[currentDateRange] = {from: histFromDate.selectedDate, to: histToDate.selectedDate};
				(IncheckModel.instance().right as RightNavigator).historyChart.dateRangeChanged();
			}
			
			private function onBack():void {
				currentDateRange--;
				histFromDate.selectedDate = dateRanges[currentDateRange].from;
				histToDate.selectedDate = dateRanges[currentDateRange].to;
				(IncheckModel.instance().right as RightNavigator).historyChart.dateRangeChanged();
			}
			
			public function setMenuItemsToUserPreferences():void {
				var val:String = IncheckModel.instance().getUserAccelerationUnits();
				setMenuItemWithLabel(accelerationUnitsMenu, val);
				IncheckModel.instance().histAccEUnit = val;
				
				val = IncheckModel.instance().getUserVelocityUnits();
				setMenuItemWithLabel(velocityUnitsMenu, val);
				IncheckModel.instance().histVelEUnit = val;

				val = IncheckModel.instance().getUserTemperatureUnits();
				setMenuItemWithLabel(temperatureUnitsMenu, val);
				IncheckModel.instance().histTempEUnit = val;
				
				val = IncheckModel.instance().getUserPressureUnits();
				setMenuItemWithLabel(pressureUnitsMenu, val);
				IncheckModel.instance().histPressEUnit = val;
				
				val = IncheckModel.instance().getUserMeasurementType();
				setMenuItemWithLabel(parameterMenu, val);
				IncheckModel.instance().historyParameter = val;		
				
//				IncheckModel.instance().right.historyChart.refreshData();
			}
			
			private function setMenuItemWithLabel(menu:MenuItem, label:String):void {
				for each (var menuItem:MenuItem in menu.children) {
					menuItem.toggled = (menuItem.label == label);
				}	
			} 		
			
			private function historyMenuItemEventHandler(event:MenuEvent):void {
				var val:String = event.item.label;
				var groupName:String = (event.item as MenuItem).group;
				if (groupName == "acceleration") {
					IncheckModel.instance().histAccEUnit = val;
					(IncheckModel.instance().right as RightNavigator).historyChart.regenStockSeriesWithZoomReset();
				} else if (groupName == "velocity") {
					IncheckModel.instance().histVelEUnit = val;
					(IncheckModel.instance().right as RightNavigator).historyChart.regenStockSeriesWithZoomReset();
				} else if (groupName == "temperature"){
					IncheckModel.instance().histTempEUnit = val;
					(IncheckModel.instance().right as RightNavigator).historyChart.regenStockSeriesWithZoomReset();
				} else if (groupName == "pressure") {
					IncheckModel.instance().histPressEUnit = val;
					(IncheckModel.instance().right as RightNavigator).historyChart.regenStockSeriesWithZoomReset();
				} else if (groupName == "overalls") {
					IncheckModel.instance().historyParameter = val;
					(IncheckModel.instance().right as RightNavigator).historyChart.refreshData();
				} else if (groupName == "bands") {
					onBandChanged(event);
				} else if (groupName == "scaling") {
					switch (val) {
						case "VZoom": {
							IncheckModel.instance().setHistoryScalingSelection(DataViewScalingTypes.VZoom);
							break;
						}
						case "Pan": {
							IncheckModel.instance().setHistoryScalingSelection(DataViewScalingTypes.Pan);
							break;
						}
						case "View all": {
							IncheckModel.instance().setHistoryScalingSelection(DataViewScalingTypes.Disabled);
							(IncheckModel.instance().right as RightNavigator).historyChart.regenStockSeriesWithZoomReset();
							break;
						}
					}
				}
			} 
			
			private function onShowMinMaxValues():void {
				(IncheckModel.instance().right as RightNavigator).historyChart.showMinMax = showMinMax.selected;
			}

  		]]>
	</fx:Script>
	<mx:MenuBar showRoot="false" id="histMenu" itemClick="historyMenuItemEventHandler(event)">
		<commn:MenuItem id="rootHistMenu">
			<commn:MenuItem id="parameterMenu" label="Parameter">
				<commn:MenuItem label="{Constants.OVERALL_PEAK}" type="radio" group="overalls" toggled="true"/>
				<commn:MenuItem label="{Constants.OVERALL_RMS}" type="radio" group="overalls" toggled="false"/>
			</commn:MenuItem>
			<commn:MenuItem id="bandMenu" label="Band">
			</commn:MenuItem>
			<commn:MenuItem id="unitsMenu" label="Units" >
				<commn:MenuItem id="accelerationUnitsMenu" label="Acceleration"  >
					<commn:MenuItem label="{Constants.MEASUREMENT_LABEL_G}" type="radio" group="acceleration" toggled="true"/>
					<commn:MenuItem label="{Constants.MEASUREMENT_LABEL_IN_S_2}" type="radio" group="acceleration" toggled="false"/>
					<commn:MenuItem label="{Constants.MEASUREMENT_LABEL_M_S_2}" type="radio" group="acceleration" toggled="false"/>
					<commn:MenuItem label="{Constants.MEASUREMENT_LABEL_MM_S_2}" type="radio" group="acceleration" toggled="false"/>
					<commn:MenuItem label="{Constants.MEASUREMENT_LABEL_DB}" type="radio" group="acceleration" toggled="false"/>
				</commn:MenuItem>
				<commn:MenuItem id="velocityUnitsMenu" label="Velocity"  >
					<commn:MenuItem label="{Constants.MEASUREMENT_LABEL_IN_S}" type="radio" group="velocity" toggled="true"/>
					<commn:MenuItem label="{Constants.MEASUREMENT_LABEL_M_S}" type="radio" group="velocity" toggled="false"/>
					<commn:MenuItem label="{Constants.MEASUREMENT_LABEL_MM_S}" type="radio" group="velocity" toggled="false"/>
					<commn:MenuItem label="{Constants.MEASUREMENT_LABEL_DB}" type="radio" group="velocity" toggled="false"/>
				</commn:MenuItem>
				<commn:MenuItem id="temperatureUnitsMenu" label="Temperature"  >
					<commn:MenuItem label="{Constants.MEASUREMENT_LABEL_C}" type="radio" group="temperature" toggled="true"/>
					<commn:MenuItem label="{Constants.MEASUREMENT_LABEL_F}" type="radio" group="temperature" toggled="false"/>
				</commn:MenuItem>
				<commn:MenuItem id="pressureUnitsMenu" label="Pressure"  >
					<commn:MenuItem label="{Constants.MEASUREMENT_LABEL_PSI}" type="radio" group="pressure" toggled="true"/>
					<commn:MenuItem label="{Constants.MEASUREMENT_LABEL_PA}" type="radio" group="pressure" toggled="false"/>
					<commn:MenuItem label="{Constants.MEASUREMENT_LABEL_BAR}" type="radio" group="pressure" toggled="false"/>
					<commn:MenuItem label="{Constants.MEASUREMENT_LABEL_KGF_CM_2}" type="radio" group="pressure" toggled="false"/>
				</commn:MenuItem>
			</commn:MenuItem>
			<commn:MenuItem id="Scaling" label="Scaling">
				<commn:MenuItem id="vzoom" label="VZoom" type="radio" group="scaling" toggled="false"/>
				<!--commn:MenuItem id="panzoom" label="Pan" type="radio" group="scaling" toggled="false"/-->
				<commn:MenuItem id="zreset" label="View all" type="radio" group="scaling" toggled="false"/>
			</commn:MenuItem>
		</commn:MenuItem>		
	</mx:MenuBar>
	
	<mx:CheckBox id="showMinMax" label="Show min/max values" click="onShowMinMaxValues()" selected="true"/>
	
	<mx:HBox>
		<mx:DateField id="histFromDate" change="onDateChaged()"/>
		<mx:DateField id="histToDate" change="onDateChaged()"/>
		<mx:Button label="Back" id="backBtn" click="onBack()" enabled="{currentDateRange>0}"/>
	</mx:HBox>

</mx:HBox>
