<?xml version="1.0" encoding="utf-8"?>
<mx:TabNavigator xmlns:components="com.incheck.components.*"
				 xmlns:fx="http://ns.adobe.com/mxml/2009"
				 xmlns:mx="library://ns.adobe.com/flex/mx"
				 xmlns:ns1="com.incheck.*"
				 xmlns:s="library://ns.adobe.com/flex/spark"
				 paddingTop="5"
				 width="100%" height="100%"
				 creationPolicy="all"
				 horizontalAlign="left" borderStyle="inset"
				 creationComplete="complete()" initialize="onInitialize()">

	<fx:Declarations>

		<mx:DataService id="dataService2"
						autoConnect="true" destination="channels" requestTimeout="60"
						conflict="conflictHandler(event)" fault="onDataServiceFault(event)" />


		<mx:DateFormatter id="dateFormatter"
						  formatString="MM/DD/YYYY LL:NN:SS A" />


		<s:ArrayCollection id="channelsList" />

	</fx:Declarations>


	<fx:Script>
		<![CDATA[

			import com.incheck.IncheckModel;
			import com.incheck.TreeDataDescriptor;
			import com.incheck.common.ICNode;

			import flexlib.scheduling.util.DateUtil;

			import mx.controls.DateField;
			import mx.core.Container;
			import mx.core.UITextField;
			import mx.data.Conflict;
			import mx.data.Conflicts;
			import mx.data.events.DataConflictEvent;
			import mx.data.events.DataServiceFaultEvent;
			import mx.events.ChildExistenceChangedEvent;


			public static var ADD_TO_LIST:String = "Add to Dashboard";

			public static var RELOAD_CFG:String = "Reload CHCFG";

			public static var CHART:String = "Chart";

			private var selectedNode:ICNode;

//			public var selectedHistoryChannel:ChannelWidget = null;

			public var statusTabRefreshTime:Timer = new Timer(60000);


			public function updateSelection(selWidget:ChannelWidget):void
			{
				var widgets:Array = selectedChannelsBox.getChildren();
				for each (var widg:ChannelWidget in widgets)
				{
					if (widg.selected && widg != selWidget)
					{
						widg.selected = false;
					}
				}
				selWidget.selected = true;
				IncheckModel.instance().selectedChannel = selWidget;
			}


			public function removeWidget(widget:ChannelWidget):void
			{
				selectedChannelsBox.removeChild(widget); 
				// according to the Flex Profiler the widget is not being garbage collected.  It still exists.
 				if (IncheckModel.instance().selectedChannel == widget)
				{
					IncheckModel.instance().selectedChannel = null;
				}
				widget = null;
			}


			private function onInitialize():void
			{
				dataService2.fill(channelsList);
				statusTabRefreshTime.addEventListener(TimerEvent.TIMER, refreshStatusBarHandler);
				statusTabRefreshTime.start();
			}


			private function refreshStatusBarHandler(event:*):void
			{
				IncheckModel.instance().getLastDeviceEvents();
			}


			private function conflictHandler(event:DataConflictEvent):void
			{
				//Alert.show("This product has been changed by someone else. The current state of the 	product has been reloaded.", "Conflict");
				var conflicts:Conflicts = dataService2.conflicts;
				var conflict:Conflict;
				for (var i:int = 0; i < conflicts.length; i++)
				{
					conflict = conflicts.getItemAt(i) as Conflict;
					if (!conflict.resolved)
					{
						conflict.acceptServer();
					}
				}
			}


			private function updateLabelForDataViewBox(e:Event):void
			{
				selectedChannelsBox.invalidateDisplayList();
				selectedChannelsBox.validateDisplayList();
				selectedChannelsBox.label = "DataSets (" + selectedChannelsBox.numChildren + ")";
				setTimeout(updateLabelForDataViewBox1, 100);
			}


			private function updateLabelForDataViewBox1():void
			{
				selectedChannelsBox.label = "DataSets (" + selectedChannelsBox.numChildren + ")";
			}


			private function updateLabelForHistoryViewBox(e:Event):void
			{
				selectedHistoryBox.invalidateDisplayList();
				selectedHistoryBox.validateDisplayList();
				selectedHistoryBox.label = "History (" + selectedHistoryBox.numChildren + ")";
				setTimeout(selectedHistoryBox1, 100);
			}


			private function selectedHistoryBox1():void
			{
				selectedHistoryBox.label = "History (" + selectedHistoryBox.numChildren + ")";
			}


			public function getChannelImages(bitmap:BitmapData, childIndex:int, offset:Number):void
			{
				var cont:Container = widgetViewAccordion.getChildAt(childIndex) as Container;
				var matrix:Matrix = new Matrix();
				matrix.translate(offset + 20, 0);
				for each (var dispObj:Object in cont.getChildren())
				{
					if (dispObj.chBox.selected)
					{
						bitmap.draw(dispObj.toPrint as DisplayObject, matrix);
						matrix.translate(0, dispObj.height + 10);
					}
				}
			}


			private function treeClicked(event:MouseEvent):void
			{
				if (tree.selectedIndex >= 0 && tree.selectedItem != null)
				{
					if (event.type == MouseEvent.CLICK)
					{
						// --- node clicked ---
						selectedNode = tree.selectedItem as ICNode;
						if (selectedNode.type == TreeDataDescriptor.NODE_TYPE_CHANNEL)
						{
							IncheckModel.instance().channelClicked(selectedNode);
						}
						else
						{
							if (tree.isItemOpen(tree.selectedItem))
							{
								tree.expandItem(tree.selectedItem, false);
							}
							else
							{
								tree.expandItem(tree.selectedItem, true);
							}
						}
					}
					if (event.type == MouseEvent.DOUBLE_CLICK)
					{
						if (selectedNode.type == TreeDataDescriptor.NODE_TYPE_CHANNEL)
						{
							IncheckModel.instance().channelClicked(selectedNode);
						}
						else if (selectedNode.type == TreeDataDescriptor.NODE_TYPE_MACHINE)
						{
							IncheckModel.instance().channelClicked(selectedNode);
						}
						else
						{
							if (!tree.isItemOpen(tree.selectedItem))
							{
								tree.expandChildrenOf(tree.selectedItem, true);
							}
						}
					}
				}
				else
				{
					// --- non node component clicked
				}
			}


			private function complete():void
			{

				IncheckModel.instance().registerLeft(this);

				selectedChannelsBox.addEventListener(ChildExistenceChangedEvent.CHILD_ADD, updateLabelForDataViewBox)
				selectedChannelsBox.addEventListener(ChildExistenceChangedEvent.CHILD_REMOVE, updateLabelForDataViewBox)

				selectedHistoryBox.addEventListener(ChildExistenceChangedEvent.CHILD_ADD, updateLabelForHistoryViewBox)
				selectedHistoryBox.addEventListener(ChildExistenceChangedEvent.CHILD_REMOVE, updateLabelForHistoryViewBox)

			}


			private function onDataServiceFault(event:DataServiceFaultEvent):void
			{
				// ignore
			}


			private function treeNodeTooltip(data:ICNode):String
			{
				return (data.incomingDataTimestamp ? dateFormatter.format(data.incomingDataTimestamp) : null);
			}

		]]>
	</fx:Script>


	<!-- Navigator Tab -->
	<mx:VBox width="100%" height="100%"
			 label="Navigation" styleName="widgetsContainer">

		<ns1:StructureTree id="tree"
						   width="100%" height="100%"
						   dataProvider="{channelsList}"
						   doubleClickEnabled="true" labelField="name"
						   borderVisible="false" dataTipFunction="treeNodeTooltip" dropShadowVisible="false" iconFunction="StructureTree.icIconFunction" itemRenderer="com.incheck.TreeRenderer" showDataTips="true" tabChildren="true"
						   click="treeClicked(event)" doubleClick="treeClicked(event)" />

	</mx:VBox>

	<mx:VBox id="selectedChannelsTab"
			 width="100%"
			 label="{widgetViewAccordion.selectedChild.label}" styleName="widgetsContainer">

		<mx:Accordion id="widgetViewAccordion"
					  width="100%" height="100%"
					  creationPolicy="all"
					  borderVisible="false">

			<mx:VBox id="selectedChannelsBox"
					 paddingLeft="4" paddingTop="4" paddingRight="4" paddingBottom="4"
					 width="100%"
					 label="DataSets (0)" styleName="widgetsContainer" />

			<mx:VBox id="selectedHistoryBox"
					 paddingLeft="4" paddingTop="4" paddingRight="4" paddingBottom="4"
					 width="100%"
					 label="History (0)" styleName="widgetsContainer" />

		</mx:Accordion>

	</mx:VBox>

</mx:TabNavigator>
