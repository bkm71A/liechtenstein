<?xml version="1.0"?>
<admin:ThresholdSettingsBase xmlns:admin="com.incheck.admin.*"
							 xmlns:components="com.incheck.components.*"
							 xmlns:fx="http://ns.adobe.com/mxml/2009"
							 xmlns:mx="library://ns.adobe.com/flex/mx"
							 xmlns:s="library://ns.adobe.com/flex/spark"
							 width="100%" height="100%"
							 label="Threshold settings"
							 creationComplete="create()">

	<fx:Declarations>

		<fx:Boolean id="enableSave">{!(parameterCB.selectedIndex==-1 || bandCB.selectedIndex==-1 || typeCB.selectedIndex==-1 || severityCB.selectedIndex==-1 
								|| measurementCB.selectedIndex==-1 || !valueInput.text.length)}</fx:Boolean>
	</fx:Declarations>


	<components:SelectMessage visible="{!selectedNode}" />

	<mx:VBox width="100%"
			 height="100%"
			 paddingLeft="10"
			 paddingTop="10" visible="{selectedNode != null}">
		<mx:Label text="{selectedNode.name}"
				  fontSize="20"
				  fontWeight="bold" />

		<mx:Label text="{selectedThreshold ? ('Modify Alert Threshold ID ' + selectedThreshold.id) : 'Create new Event Threshold'}" />

		<mx:ApplicationControlBar>
			<mx:HBox verticalAlign="middle">

				<mx:Label text="Parameter" />

				<mx:ComboBox id="parameterCB"
							 dataProvider="{parameters}" selectedItem="{selectedThreshold.parameter}"
							 change="parameterCB_changeHandler(event)" />

				<mx:Label text="Band" />

				<mx:ComboBox id="bandCB"
							 width="100"
							 labelField="name" selectedItem="{selectedThreshold.band}" />

				<mx:Label text="Type" />

				<mx:ComboBox id="typeCB"
							 dataProvider="{types}" selectedItem="{selectedThreshold.type}" />

				<mx:Label text="Severity" />

				<mx:ComboBox id="severityCB"
							 width="50"
							 dataProvider="{severity}"
							 labelField="value" selectedItem="{selectedThreshold.severity}" />

				<mx:Label text="Value" />

				<mx:TextInput id="valueInput"
							  width="50"
							  text="{selectedThreshold.value}" />

				<mx:ComboBox id="measurementCB"
							 dataProvider="{Constants.VELOCITY_MEASUREMENT}" selectedItem="{selectedThreshold.mes}" />

				<mx:Button width="100"
						   enabled="{enableSave}"
						   label="{selectedThreshold ? 'Modify' : 'Add'}"
						   click="addOrModifyEventThreshold(selectedNode.channelid.toString(),
						   parameterCB.selectedItem as String,
						   bandCB.selectedItem as Band,
						   typeCB.selectedItem as String,
						   severityCB.selectedItem as Severity,
						   valueInput.text,
						   measurementCB.text)" />

			</mx:HBox>
		</mx:ApplicationControlBar>

		<mx:ApplicationControlBar width="100%">

			<!--itemEditEnd="changeThreshBounds(event,configuredEventsGrid);"-->
			<!--itemClick="whatToDo(event, configuredEventsGrid);"-->

			<mx:AdvancedDataGrid id="configuredEventsGrid"
								 width="100%"
								 dataProvider="{dsm}" designViewDataType="flat">
				<mx:columns>

					<!--<mx:AdvancedDataGridColumn headerText="ID" dataField="id" labelFunction="dataLabel"/>-->
					<mx:AdvancedDataGridColumn textAlign="center" dataField="id" headerText="ID" />

					<mx:AdvancedDataGridColumn textAlign="center" dataField="parameter" headerText="Parameter" />

					<mx:AdvancedDataGridColumn labelFunction="dataLabel"
											   textAlign="center" dataField="band" headerText="Band" />

					<mx:AdvancedDataGridColumn textAlign="center" dataField="type" headerText="Type" />

					<mx:AdvancedDataGridColumn labelFunction="dataLabel"
											   textAlign="center" dataField="severity" headerText="Severity" />

					<mx:AdvancedDataGridColumn labelFunction="valueLabel"
											   textAlign="center" dataField="value" headerText="Value" />

					<mx:AdvancedDataGridColumn headerText="Options">
						<mx:itemRenderer>
							<fx:Component>
								<!--<mx:Button label="delete"/>-->
								<mx:HBox width="100%"
										 horizontalAlign="center">
									<fx:Script>
										<![CDATA[

											import com.incheck.admin.events.ThresholdSettingsEvent;
											import com.incheck.common.EventThreshold;


											private function onEdit(event:Event):void
											{
												dispatchEvent(new ThresholdSettingsEvent(ThresholdSettingsEvent.EDIT_THRESHOLD, data as EventThreshold));
											}


											private function onDelete(event:Event):void
											{
												dispatchEvent(new ThresholdSettingsEvent(ThresholdSettingsEvent.DELETE_THRESHOLD, data as EventThreshold));
											}

										]]>
									</fx:Script>

									<mx:Image source="@Embed(source='/resources/edit.png')"
											  toolTip="Edit threshold"
											  click="onEdit(event)" />

									<mx:Image source="@Embed(source='/resources/delete.png')"
											  toolTip="Delete threshold"
											  click="onDelete(event)" />
								</mx:HBox>
							</fx:Component>
						</mx:itemRenderer>
					</mx:AdvancedDataGridColumn>
				</mx:columns>
			</mx:AdvancedDataGrid>
		</mx:ApplicationControlBar>

	</mx:VBox>

	<fx:Script>
		<![CDATA[

			import mx.collections.ArrayCollection;
			import mx.events.ListEvent;
			import com.incheck.Constants;
			import com.incheck.admin.events.ThresholdSettingsEvent;
			import com.incheck.common.Band;
			import com.incheck.common.Severity;


			override protected function create():void
			{
				super.create();
				configuredEventsGrid.addEventListener(ThresholdSettingsEvent.EDIT_THRESHOLD, onEditThreshold, true);
				configuredEventsGrid.addEventListener(ThresholdSettingsEvent.DELETE_THRESHOLD, onDeleteThreshold, true);
			}


			override protected function clearForm():void
			{
				super.clearForm();
				parameterCB.selectedIndex = -1;
				bandCB.selectedIndex = -1;
				typeCB.selectedIndex = -1;
				severityCB.selectedIndex = -1;
				valueInput.text = "";
				measurementCB.selectedIndex = -1;
			}


			override protected function updateMes():void
			{
				measurementCB.dataProvider = parameterCB.selectedIndex ? Constants.ACCELERATION_MEASUREMENT : Constants.VELOCITY_MEASUREMENT;
				measurementCB.selectedItem = selectedThreshold.mes;
			}


			override protected function updateBands(newBands:ArrayCollection):void
			{
				super.updateBands(newBands);
				(bandCB.dataProvider as ArrayCollection).removeAll();
				(bandCB.dataProvider as ArrayCollection).addAll(newBands);
			}


			protected function parameterCB_changeHandler(event:ListEvent):void
			{
				measurementCB.dataProvider = parameterCB.selectedIndex ? Constants.ACCELERATION_MEASUREMENT : Constants.VELOCITY_MEASUREMENT;
			}

		]]>
	</fx:Script>
</admin:ThresholdSettingsBase>
