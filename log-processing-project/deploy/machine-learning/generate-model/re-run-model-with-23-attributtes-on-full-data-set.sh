/usr/bin/spark-shell --master yarn-client --driver-memory 512m --executor-memory 512m
import org.apache.spark.SparkContext
import org.apache.spark.mllib.classification.{LogisticRegressionWithLBFGS, LogisticRegressionModel, SVMModel, SVMWithSGD}
import org.apache.spark.mllib.evaluation.MulticlassMetrics
import org.apache.spark.mllib.evaluation.BinaryClassificationMetrics
import org.apache.spark.mllib.regression.LabeledPoint
import org.apache.spark.mllib.linalg.Vectors
import org.apache.spark.mllib.util.MLUtils
import org.apache.spark.mllib.tree.DecisionTree
import org.apache.spark.mllib.tree.model.DecisionTreeModel
import org.apache.spark.mllib.classification.{NaiveBayes, NaiveBayesModel}
import org.apache.spark.mllib.tree.GradientBoostedTrees
import org.apache.spark.mllib.tree.configuration.BoostingStrategy
import org.apache.spark.mllib.tree.model.GradientBoostedTreesModel

val parquetFile = sqlContext.read.parquet("/user/hadoop/ml_data/")
parquetFile.registerTempTable("log_data_subset")
val model = LogisticRegressionModel.load(sc, "hdfs:///user/hadoop/project_model")
val denormalized = sqlContext.sql("SELECT CASE WHEN nvl(t1.bid_counters['site-search'],0)>0 THEN 1.0 ELSE 0.0 END as site_search, 0.0 as start_time, 0.0 as current_time, 0.0 as end_time, abs(date_format(t1.ts_end,'mmssSSS') - date_format(t1.ts_start,'mmssSSS')) as time_span, cast(date_format(t1.ts_start,'u') as double) as weekday, t1.ad_stats.min_width*1.0 as min_width, 0.0 as max_width, 0.0 as min_height, t1.ad_stats.max_height*1.0 as max_height, 0.0 as min_visibility, 0.0 as max_visibility, t1.ext_city.id*1.0 as city_id, pmod(t1.ext_city.state_id,51)*1.0 as state_id, 0.0 as city_population, 0.0 as city_area, 1.0*CASE ltrim(rtrim(t1.ext_user_agent.ua_type)) WHEN 'unknown' THEN 0 WHEN 'Browser' THEN 1 WHEN 'Browser (mobile)' THEN 2 WHEN 'Robot' THEN 3 ELSE 4 END as ua_type, 1.0*CASE ltrim(rtrim(t1.ext_user_agent.ua_family)) WHEN 'Apple WebKit' THEN 0 WHEN 'CFNetwork' THEN 1 WHEN 'Camino' THEN 2 WHEN 'Chrome' THEN 3 WHEN 'Downloading Tool' THEN 4 WHEN 'Firefox' THEN 5 WHEN 'Flock' THEN 6 WHEN 'Internet Explorer' THEN 7 WHEN 'Konqueror' THEN 8 WHEN 'Microsoft Edge' THEN 9 WHEN 'Mozilla' THEN 10 WHEN 'NetFront' THEN 11 WHEN 'Omniweb' THEN 12 WHEN 'Opera' THEN 13 WHEN 'Outlook' THEN 14 WHEN 'Robot/Spider' THEN 15 WHEN 'Safari' THEN 16 WHEN 'Samsung Dolphin 2' THEN 17 WHEN 'SeaMonkey' THEN 18 WHEN 'Thunderbird' THEN 19 WHEN 'Unknown' THEN 20 ELSE  21 END as ua_family, 0.0 as ua_os_name, 1.0*CASE ltrim(rtrim(t1.ext_user_agent.device)) WHEN 'Computer' THEN 0 WHEN 'Digital media receiver' THEN 1 WHEN 'Game console' THEN 2 WHEN 'Mobile' THEN 3 WHEN 'Tablet' THEN 4 WHEN 'Unknown' THEN 5 ELSE 6 END as ua_device, 0.0 as unknown_count, nvl(t1.bid_counters['site-impression'],0)*1.0 as site_impression_count, nvl(t1.bid_counters['site-click'],0)*1.0 as site_click_count, nvl(t1.bid_counters['site-paid'],0)*1.0 as site_paid_count, 0.0 as site_qk_search_count, 0.0 as site_full_search_count, 0.0 as site_basket_count, 0.0 as city_density, 1.0*size(t1.bid_counters) as bid_counters_size, 1.0*size(t1.ad_slots) as ad_slots_size, 1.0*size(t1.keyword_category_counters) as keyword_category_counters_size, 1.0*size(t1.keyword_counters) as keyword_counters_size, 0.0 as category_1_count, 0.0 as category_2_count, 0.0 as category_3_count, nvl(t1.keyword_category_counters['rearview'],0)*1.0 as category_4_count, 0.0 as category_5_count, 0.0 as category_6_count, 0.0 as category_7_count, 0.0 as category_8_count, 0.0 as category_9_count, 0.0 as category_10_count, 0.0 as category_11_count, 0.0 as category_12_count, 0.0 as category_13_count, 0.0 as category_14_count, 0.0 as category_15_count, 0.0 as category_16_count, 0.0 as category_17_count, 0.0 as category_18_count, 0.0 as category_19_count, 0.0 as category_20_count, 0.0 as category_21_count, 0.0 as category_22_count, 0.0 as category_23_count, 0.0 as category_24_count, 0.0 as category_25_count, 0.0 as category_26_count, 0.0 as category_27_count, 0.0 as category_28_count, 0.0 as category_29_count, 0.0 as category_30_count, 0.0 as category_31_count, 0.0 as category_32_count, 0.0 as category_33_count, 0.0 as category_34_count, 0.0 as category_35_count, 0.0 as category_36_count, 0.0 as category_37_count, nvl(t1.keyword_category_counters['chevrolet'],0)*1.0 as category_38_count, 0.0 as category_39_count, 0.0 as category_40_count, 0.0 as category_41_count, 0.0 as category_42_count, 0.0 as category_43_count, 0.0 as category_44_count, 0.0 as category_45_count, 0.0 as category_46_count, 0.0 as category_47_count, 0.0 as category_48_count, 0.0 as category_49_count, 0.0 as category_50_count, 0.0 as category_51_count, 0.0 as category_52_count, 0.0 as category_53_count, 0.0 as category_54_count, 0.0 as category_55_count, 0.0 as category_56_count, 0.0 as category_57_count, 0.0 as category_58_count, 0.0 as category_59_count, 0.0 as category_60_count, 0.0 as category_61_count, 0.0 as category_62_count, 0.0 as category_63_count, 0.0 as category_64_count, 0.0 as category_65_count, 0.0 as category_66_count, 0.0 as category_67_count, 0.0 as category_68_count, nvl(t1.keyword_category_counters['0mp'],0)*1.0 as category_69_count, 0.0 as category_70_count, 0.0 as category_71_count, 0.0 as category_72_count, 0.0 as category_73_count, 0.0 as category_74_count, 0.0 as category_75_count, 0.0 as category_76_count, 0.0 as category_77_count, 0.0 as category_78_count, 0.0 as category_79_count, 0.0 as category_80_count, 0.0 as category_81_count, 0.0 as category_82_count, 0.0 as category_83_count, 0.0 as category_84_count, 0.0 as category_85_count, 0.0 as category_86_count, 0.0 as category_87_count, 0.0 as category_88_count, 0.0 as category_89_count, 0.0 as category_90_count, 0.0 as category_91_count, 0.0 as category_92_count, 0.0 as category_93_count, 0.0 as category_94_count, 0.0 as category_95_count, 0.0 as category_96_count, 0.0 as category_97_count, 0.0 as category_98_count, 0.0 as category_99_count, 0.0 as category_100_count, 0.0 as category_101_count, 0.0 as category_102_count, 0.0 as category_103_count, 0.0 as category_104_count, 0.0 as category_105_count, 0.0 as category_106_count, 0.0 as category_107_count, 0.0 as category_108_count, 0.0 as category_109_count, 0.0 as category_110_count, 0.0 as category_111_count, 0.0 as category_112_count, 0.0 as category_113_count, 0.0 as category_114_count, nvl(t1.keyword_category_counters['speaker'],0)*1.0 as category_115_count, 0.0 as category_116_count, 0.0 as category_117_count, 0.0 as category_118_count, 0.0 as category_119_count, 0.0 as category_120_count, 0.0 as category_121_count, 0.0 as category_122_count, 0.0 as category_123_count, 0.0 as category_124_count, nvl(t1.keyword_category_counters['ungrouped'],0)*1.0 as category_125_count FROM log_data_subset t1")
val featureVector = denormalized.map(row => new LabeledPoint(row.getDouble(0),Vectors.dense(row.getDouble(1), row.getDouble(2), row.getDouble(3), row.getDouble(4), row.getDouble(5), row.getDouble(6), row.getDouble(7), row.getDouble(8), row.getDouble(9), row.getDouble(10), row.getDouble(11), row.getDouble(12), row.getDouble(13), row.getDouble(14), row.getDouble(15), row.getDouble(16), row.getDouble(17), row.getDouble(18), row.getDouble(19), row.getDouble(20), row.getDouble(21), row.getDouble(22), row.getDouble(23), row.getDouble(24), row.getDouble(25), row.getDouble(26), row.getDouble(27), row.getDouble(28), row.getDouble(29), row.getDouble(30), row.getDouble(31), row.getDouble(32), row.getDouble(33), row.getDouble(34), row.getDouble(35), row.getDouble(36), row.getDouble(37), row.getDouble(38), row.getDouble(39), row.getDouble(40), row.getDouble(41), row.getDouble(42), row.getDouble(43), row.getDouble(44), row.getDouble(45), row.getDouble(46), row.getDouble(47), row.getDouble(48), row.getDouble(49), row.getDouble(50), row.getDouble(51), row.getDouble(52), row.getDouble(53), row.getDouble(54), row.getDouble(55), row.getDouble(56), row.getDouble(57), row.getDouble(58), row.getDouble(59), row.getDouble(60), row.getDouble(61), row.getDouble(62), row.getDouble(63), row.getDouble(64), row.getDouble(65), row.getDouble(66), row.getDouble(67), row.getDouble(68), row.getDouble(69), row.getDouble(70), row.getDouble(71), row.getDouble(72), row.getDouble(73), row.getDouble(74), row.getDouble(75), row.getDouble(76), row.getDouble(77), row.getDouble(78), row.getDouble(79), row.getDouble(80), row.getDouble(81), row.getDouble(82), row.getDouble(83), row.getDouble(84), row.getDouble(85), row.getDouble(86), row.getDouble(87), row.getDouble(88), row.getDouble(89), row.getDouble(90), row.getDouble(91), row.getDouble(92), row.getDouble(93), row.getDouble(94), row.getDouble(95), row.getDouble(96), row.getDouble(97), row.getDouble(98), row.getDouble(99), row.getDouble(100), row.getDouble(101), row.getDouble(102), row.getDouble(103), row.getDouble(104), row.getDouble(105), row.getDouble(106), row.getDouble(107), row.getDouble(108), row.getDouble(109), row.getDouble(110), row.getDouble(111), row.getDouble(112), row.getDouble(113), row.getDouble(114), row.getDouble(115), row.getDouble(116), row.getDouble(117), row.getDouble(118), row.getDouble(119), row.getDouble(120), row.getDouble(121), row.getDouble(122), row.getDouble(123), row.getDouble(124), row.getDouble(125), row.getDouble(126), row.getDouble(127), row.getDouble(128), row.getDouble(129), row.getDouble(130), row.getDouble(131), row.getDouble(132), row.getDouble(133), row.getDouble(134), row.getDouble(135), row.getDouble(136), row.getDouble(137), row.getDouble(138), row.getDouble(139), row.getDouble(140), row.getDouble(141), row.getDouble(142), row.getDouble(143), row.getDouble(144), row.getDouble(145), row.getDouble(146), row.getDouble(147), row.getDouble(148), row.getDouble(149), row.getDouble(150), row.getDouble(151), row.getDouble(152), row.getDouble(153), row.getDouble(154), row.getDouble(155), row.getDouble(156))))

val predictionAndLabels = featureVector.map { case LabeledPoint(label, features) =>
  val prediction = model.predict(features)
  (prediction, label)
}

// Get evaluation metrics.
println("Area under ROC = " + new BinaryClassificationMetrics(predictionAndLabels).areaUnderROC())
val mcMetrics = new MulticlassMetrics(predictionAndLabels)
println("Precision = " + mcMetrics.precision)
println("ConfusionMatrix:\n" + mcMetrics.confusionMatrix)

/*
Area under ROC = 0.7799604673682982
Precision = 0.7149652294186397
ConfusionMatrix:
885188.0  354751.0
1557.0    8555.0
*/