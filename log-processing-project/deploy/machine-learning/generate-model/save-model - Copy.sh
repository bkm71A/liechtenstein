hadoop fs -rm -r -skipTrash /user/hadoop/ml_data 
hadoop fs -mkdir -p /user/hadoop/ml_data 
hadoop fs -put /share/project/bidding_session.parquet/1200K/* /user/hadoop/ml_data/

/usr/bin/spark-shell --master yarn-client --driver-memory 512m --executor-memory 512m
import org.apache.spark.SparkContext
import org.apache.spark.mllib.classification.{LogisticRegressionWithLBFGS, LogisticRegressionModel, SVMModel, SVMWithSGD}
import org.apache.spark.mllib.evaluation.MulticlassMetrics
import org.apache.spark.mllib.evaluation.BinaryClassificationMetrics
import org.apache.spark.mllib.regression.LabeledPoint
import org.apache.spark.mllib.linalg.Vectors
import org.apache.spark.mllib.util.MLUtils
import org.apache.spark.mllib.tree.DecisionTree
import org.apache.spark.mllib.tree.model.DecisionTreeModel
import org.apache.spark.mllib.classification.{NaiveBayes, NaiveBayesModel}
import org.apache.spark.mllib.tree.GradientBoostedTrees
import org.apache.spark.mllib.tree.configuration.BoostingStrategy
import org.apache.spark.mllib.tree.model.GradientBoostedTreesModel

val parquetFile = sqlContext.read.parquet("/user/hadoop/ml_data/")
parquetFile.registerTempTable("log_data")
// Use undersampling to deal with imbalanced classes : site-search is 1,112 out of all 1,250,051 or 0.089%
val siteSearch = sqlContext.sql("SELECT * FROM log_data t1 WHERE nvl(t1.bid_counters['site-search'],0) > 0")
val others = sqlContext.sql("SELECT * FROM log_data t1 WHERE nvl(t1.bid_counters['site-search'],0) = 0 LIMIT 20224")
val valueSet =  siteSearch.unionAll(others)
valueSet.registerTempTable("log_data_subset")
val denormalized = sqlContext.sql("SELECT CASE WHEN nvl(t1.bid_counters['site-search'],0)>0 THEN 1.0 ELSE 0.0 END as site_search, hour(t1.ts_start)*1.0 + minute(t1.ts_start)/60.0 as start_time, hour(t1.ts_current)*1.0 + minute(t1.ts_current)/60.0 as current_time, hour(t1.ts_end)*1.0 + minute(t1.ts_end)/60.0 as end_time, abs(date_format(t1.ts_end,'mmssSSS') - date_format(t1.ts_start,'mmssSSS')) as time_span, cast(date_format(t1.ts_start,'u') as double) as weekday, t1.ad_stats.min_width*1.0 as min_width, t1.ad_stats.max_width*1.0 as max_width, t1.ad_stats.min_height*1.0 as min_height, t1.ad_stats.max_height*1.0 as max_height, pmod(t1.ad_stats.min_visibility,7)*1.0 as min_visibility, pmod(t1.ad_stats.max_visibility,7)*1.0 as max_visibility, t1.ext_city.id*1.0 as city_id, pmod(t1.ext_city.state_id,51)*1.0 as state_id, t1.ext_city.population*1.0 as city_population, t1.ext_city.area*1.0 as city_area, 1.0*CASE ltrim(rtrim(t1.ext_user_agent.ua_type)) WHEN 'unknown' THEN 0 WHEN 'Browser' THEN 1 WHEN 'Browser (mobile)' THEN 2 WHEN 'Robot' THEN 3 ELSE 4 END as ua_type, 1.0*CASE ltrim(rtrim(t1.ext_user_agent.ua_family)) WHEN 'Apple WebKit' THEN 0 WHEN 'CFNetwork' THEN 1 WHEN 'Camino' THEN 2 WHEN 'Chrome' THEN 3 WHEN 'Downloading Tool' THEN 4 WHEN 'Firefox' THEN 5 WHEN 'Flock' THEN 6 WHEN 'Internet Explorer' THEN 7 WHEN 'Konqueror' THEN 8 WHEN 'Microsoft Edge' THEN 9 WHEN 'Mozilla' THEN 10 WHEN 'NetFront' THEN 11 WHEN 'Omniweb' THEN 12 WHEN 'Opera' THEN 13 WHEN 'Outlook' THEN 14 WHEN 'Robot/Spider' THEN 15 WHEN 'Safari' THEN 16 WHEN 'Samsung Dolphin 2' THEN 17 WHEN 'SeaMonkey' THEN 18 WHEN 'Thunderbird' THEN 19 WHEN 'Unknown' THEN 20 ELSE  21 END as ua_family,  1.0*CASE ltrim(rtrim(t1.ext_user_agent.os_name)) WHEN 'Android' THEN 0 WHEN 'Android (Google TV)' THEN 1 WHEN 'Android 1.x' THEN 2 WHEN 'Android 2.x' THEN 3 WHEN 'Android 2.x Tablet' THEN 4 WHEN 'Android 3.x Tablet' THEN 5 WHEN 'Android 4.x' THEN 6 WHEN 'Android 4.x Tablet' THEN 7 WHEN 'Android 5.x' THEN 8 WHEN 'Android 5.x Tablet' THEN 9 WHEN 'Android 6.x' THEN 10 WHEN 'Android 6.x Tablet' THEN 11 WHEN 'Android Mobile' THEN 12 WHEN 'Android Tablet' THEN 13 WHEN 'Bada' THEN 14 WHEN 'BlackBerry 6' THEN 15 WHEN 'BlackBerry 7' THEN 16 WHEN 'BlackBerry Tablet OS' THEN 17 WHEN 'BlackBerryOS' THEN 18 WHEN 'Chrome OS' THEN 19 WHEN 'Linux' THEN 20 WHEN 'Mac OS' THEN 21 WHEN 'Mac OS X' THEN 22 WHEN 'Mac OS X (iPad)' THEN 23 WHEN 'Mac OS X (iPhone)' THEN 24 WHEN 'Mac OS X (iPod)' THEN 25 WHEN 'Maemo' THEN 26 WHEN 'MeeGo' THEN 27 WHEN 'Nintendo Wii' THEN 28 WHEN 'PalmOS' THEN 29 WHEN 'Series 40' THEN 30 WHEN 'Sony Ericsson' THEN 31 WHEN 'Sony Playstation' THEN 32 WHEN 'SunOS' THEN 33 WHEN 'Symbian OS' THEN 34 WHEN 'Symbian OS 7.x' THEN 35 WHEN 'Symbian OS 8.x' THEN 36 WHEN 'Symbian OS 9.x' THEN 37 WHEN 'Ubuntu' THEN 38 WHEN 'Unknown' THEN 39 WHEN 'Unknown mobile' THEN 40 WHEN 'Unknown tablet' THEN 41 WHEN 'WebOS' THEN 42 WHEN 'Windows' THEN 43 WHEN 'Windows 2000' THEN 44 WHEN 'Windows 7' THEN 45 WHEN 'Windows 8' THEN 46 WHEN 'Windows 8.1' THEN 47 WHEN 'Windows 98' THEN 48 WHEN 'Windows Mobile' THEN 49 WHEN 'Windows Phone 7' THEN 50 WHEN 'Windows Phone 8' THEN 51 WHEN 'Windows Vista' THEN 52 WHEN 'Windows XP' THEN 53 WHEN 'Xbox OS' THEN 54 WHEN 'iOS' THEN 55 WHEN 'iOS 4 (iPhone)' THEN 56 WHEN 'iOS 5 (iPhone)' THEN 57 WHEN 'iOS 6 (iPad)' THEN 58 WHEN 'iOS 6 (iPhone)' THEN 59 WHEN 'iOS 7 (iPhone)' THEN 60 ELSE 61 END as ua_os_name, 1.0*CASE ltrim(rtrim(t1.ext_user_agent.device)) WHEN 'Computer' THEN 0 WHEN 'Digital media receiver' THEN 1 WHEN 'Game console' THEN 2 WHEN 'Mobile' THEN 3 WHEN 'Tablet' THEN 4 WHEN 'Unknown' THEN 5 ELSE 6 END as ua_device, nvl(t1.bid_counters['unknown'],0)*1.0 as unknown_count, nvl(t1.bid_counters['site-impression'],0)*1.0 as site_impression_count, nvl(t1.bid_counters['site-click'],0)*1.0 as site_click_count, nvl(t1.bid_counters['site-paid'],0)*1.0 as site_paid_count, nvl(t1.bid_counters['site-qk-search'],0)*1.0 as site_qk_search_count, nvl(t1.bid_counters['site-full-search'],0)*1.0 as site_full_search_count, nvl(t1.bid_counters['site-basket'],0)*1.0 as site_basket_count, t1.ext_city.density *1.0 as city_density, 1.0*size(t1.bid_counters) as bid_counters_size, 1.0*size(t1.ad_slots) as ad_slots_size, 1.0*size(t1.keyword_category_counters) as keyword_category_counters_size, 1.0*size(t1.keyword_counters) as keyword_counters_size, nvl(t1.keyword_category_counters['accessories'],0)*1.0 as category_1_count, nvl(t1.keyword_category_counters['car'],0)*1.0 as category_2_count, nvl(t1.keyword_category_counters['honda'],0)*1.0 as category_3_count, nvl(t1.keyword_category_counters['rearview'],0)*1.0 as category_4_count, nvl(t1.keyword_category_counters['light'],0)*1.0 as category_5_count, nvl(t1.keyword_category_counters['security'],0)*1.0 as category_6_count, nvl(t1.keyword_category_counters['system'],0)*1.0 as category_7_count, nvl(t1.keyword_category_counters['hd'],0)*1.0 as category_8_count, nvl(t1.keyword_category_counters['sensor'],0)*1.0 as category_9_count, nvl(t1.keyword_category_counters['wireless'],0)*1.0 as category_10_count, nvl(t1.keyword_category_counters['display'],0)*1.0 as category_11_count, nvl(t1.keyword_category_counters['motorcycle'],0)*1.0 as category_12_count, nvl(t1.keyword_category_counters['back'],0)*1.0 as category_13_count, nvl(t1.keyword_category_counters['assorted'],0)*1.0 as category_14_count, nvl(t1.keyword_category_counters['motion'],0)*1.0 as category_15_count, nvl(t1.keyword_category_counters['buick'],0)*1.0 as category_16_count, nvl(t1.keyword_category_counters['hyundai'],0)*1.0 as category_17_count, nvl(t1.keyword_category_counters['pal'],0)*1.0 as category_18_count, nvl(t1.keyword_category_counters['wide'],0)*1.0 as category_19_count, nvl(t1.keyword_category_counters['24v'],0)*1.0 as category_20_count, nvl(t1.keyword_category_counters['auto'],0)*1.0 as category_21_count, nvl(t1.keyword_category_counters['input'],0)*1.0 as category_22_count, nvl(t1.keyword_category_counters['lcd'],0)*1.0 as category_23_count, nvl(t1.keyword_category_counters['handsfree'],0)*1.0 as category_24_count, nvl(t1.keyword_category_counters['gprs'],0)*1.0 as category_25_count, nvl(t1.keyword_category_counters['antenna'],0)*1.0 as category_26_count, nvl(t1.keyword_category_counters['bulb'],0)*1.0 as category_27_count, nvl(t1.keyword_category_counters['dvd'],0)*1.0 as category_28_count, nvl(t1.keyword_category_counters['tv'],0)*1.0 as category_29_count, nvl(t1.keyword_category_counters['audi'],0)*1.0 as category_30_count, nvl(t1.keyword_category_counters['cell'],0)*1.0 as category_31_count, nvl(t1.keyword_category_counters['720p'],0)*1.0 as category_32_count, nvl(t1.keyword_category_counters['cam'],0)*1.0 as category_33_count, nvl(t1.keyword_category_counters['code'],0)*1.0 as category_34_count, nvl(t1.keyword_category_counters['multi'],0)*1.0 as category_35_count, nvl(t1.keyword_category_counters['aux'],0)*1.0 as category_36_count, nvl(t1.keyword_category_counters['bmw'],0)*1.0 as category_37_count, nvl(t1.keyword_category_counters['chevrolet'],0)*1.0 as category_38_count, nvl(t1.keyword_category_counters['gadgets'],0)*1.0 as category_39_count, nvl(t1.keyword_category_counters['html'],0)*1.0 as category_40_count, nvl(t1.keyword_category_counters['k6000'],0)*1.0 as category_41_count, nvl(t1.keyword_category_counters['mercedes'],0)*1.0 as category_42_count, nvl(t1.keyword_category_counters['player'],0)*1.0 as category_43_count, nvl(t1.keyword_category_counters['q7'],0)*1.0 as category_44_count, nvl(t1.keyword_category_counters['rang'],0)*1.0 as category_45_count, nvl(t1.keyword_category_counters['toyota'],0)*1.0 as category_46_count, nvl(t1.keyword_category_counters['v1'],0)*1.0 as category_47_count, nvl(t1.keyword_category_counters['wired'],0)*1.0 as category_48_count, nvl(t1.keyword_category_counters['reverse'],0)*1.0 as category_49_count, nvl(t1.keyword_category_counters['video'],0)*1.0 as category_50_count, nvl(t1.keyword_category_counters['vehicle'],0)*1.0 as category_51_count, nvl(t1.keyword_category_counters['hands'],0)*1.0 as category_52_count, nvl(t1.keyword_category_counters['cmos'],0)*1.0 as category_53_count, nvl(t1.keyword_category_counters['music'],0)*1.0 as category_54_count, nvl(t1.keyword_category_counters['mirror'],0)*1.0 as category_55_count, nvl(t1.keyword_category_counters['transmitter'],0)*1.0 as category_56_count, nvl(t1.keyword_category_counters['battery'],0)*1.0 as category_57_count, nvl(t1.keyword_category_counters['ii'],0)*1.0 as category_58_count, nvl(t1.keyword_category_counters['mobile'],0)*1.0 as category_59_count, nvl(t1.keyword_category_counters['parts'],0)*1.0 as category_60_count, nvl(t1.keyword_category_counters['blue'],0)*1.0 as category_61_count, nvl(t1.keyword_category_counters['calling'],0)*1.0 as category_62_count, nvl(t1.keyword_category_counters['chip'],0)*1.0 as category_63_count, nvl(t1.keyword_category_counters['connector'],0)*1.0 as category_64_count, nvl(t1.keyword_category_counters['scan'],0)*1.0 as category_65_count, nvl(t1.keyword_category_counters['smart'],0)*1.0 as category_66_count, nvl(t1.keyword_category_counters['two'],0)*1.0 as category_67_count, nvl(t1.keyword_category_counters['water'],0)*1.0 as category_68_count, nvl(t1.keyword_category_counters['0mp'],0)*1.0 as category_69_count, nvl(t1.keyword_category_counters['crv'],0)*1.0 as category_70_count, nvl(t1.keyword_category_counters['dc'],0)*1.0 as category_71_count, nvl(t1.keyword_category_counters['ford'],0)*1.0 as category_72_count, nvl(t1.keyword_category_counters['headset'],0)*1.0 as category_73_count, nvl(t1.keyword_category_counters['ir'],0)*1.0 as category_74_count, nvl(t1.keyword_category_counters['lebosh'],0)*1.0 as category_75_count, nvl(t1.keyword_category_counters['modulator'],0)*1.0 as category_76_count, nvl(t1.keyword_category_counters['mount'],0)*1.0 as category_77_count, nvl(t1.keyword_category_counters['personal'],0)*1.0 as category_78_count, nvl(t1.keyword_category_counters['real'],0)*1.0 as category_79_count, nvl(t1.keyword_category_counters['rotating'],0)*1.0 as category_80_count, nvl(t1.keyword_category_counters['slot'],0)*1.0 as category_81_count, nvl(t1.keyword_category_counters['speed'],0)*1.0 as category_82_count, nvl(t1.keyword_category_counters['voltmeter'],0)*1.0 as category_83_count, nvl(t1.keyword_category_counters['accessoires'],0)*1.0 as category_84_count, nvl(t1.keyword_category_counters['card'],0)*1.0 as category_85_count, nvl(t1.keyword_category_counters['cigarette'],0)*1.0 as category_86_count, nvl(t1.keyword_category_counters['cleaning'],0)*1.0 as category_87_count, nvl(t1.keyword_category_counters['cold'],0)*1.0 as category_88_count, nvl(t1.keyword_category_counters['decoration'],0)*1.0 as category_89_count, nvl(t1.keyword_category_counters['definition'],0)*1.0 as category_90_count, nvl(t1.keyword_category_counters['emergency'],0)*1.0 as category_91_count, nvl(t1.keyword_category_counters['equipment'],0)*1.0 as category_92_count, nvl(t1.keyword_category_counters['european'],0)*1.0 as category_93_count, nvl(t1.keyword_category_counters['film'],0)*1.0 as category_94_count, nvl(t1.keyword_category_counters['foldable'],0)*1.0 as category_95_count, nvl(t1.keyword_category_counters['fuse'],0)*1.0 as category_96_count, nvl(t1.keyword_category_counters['golf'],0)*1.0 as category_97_count, nvl(t1.keyword_category_counters['gs8000l'],0)*1.0 as category_98_count, nvl(t1.keyword_category_counters['hatchback'],0)*1.0 as category_99_count, nvl(t1.keyword_category_counters['head'],0)*1.0 as category_100_count, nvl(t1.keyword_category_counters['hot'],0)*1.0 as category_101_count, nvl(t1.keyword_category_counters['interior'],0)*1.0 as category_102_count, nvl(t1.keyword_category_counters['ios'],0)*1.0 as category_103_count, nvl(t1.keyword_category_counters['mitsubishi'],0)*1.0 as category_104_count, nvl(t1.keyword_category_counters['navigation'],0)*1.0 as category_105_count, nvl(t1.keyword_category_counters['plastic'],0)*1.0 as category_106_count, nvl(t1.keyword_category_counters['power'],0)*1.0 as category_107_count, nvl(t1.keyword_category_counters['products'],0)*1.0 as category_108_count, nvl(t1.keyword_category_counters['realtime'],0)*1.0 as category_109_count, nvl(t1.keyword_category_counters['red'],0)*1.0 as category_110_count, nvl(t1.keyword_category_counters['repair'],0)*1.0 as category_111_count, nvl(t1.keyword_category_counters['samsung'],0)*1.0 as category_112_count, nvl(t1.keyword_category_counters['side'],0)*1.0 as category_113_count, nvl(t1.keyword_category_counters['skoda'],0)*1.0 as category_114_count, nvl(t1.keyword_category_counters['speaker'],0)*1.0 as category_115_count, nvl(t1.keyword_category_counters['stickers'],0)*1.0 as category_116_count, nvl(t1.keyword_category_counters['strobe'],0)*1.0 as category_117_count, nvl(t1.keyword_category_counters['subaru'],0)*1.0 as category_118_count, nvl(t1.keyword_category_counters['switch'],0)*1.0 as category_119_count, nvl(t1.keyword_category_counters['theft'],0)*1.0 as category_120_count, nvl(t1.keyword_category_counters['trail'],0)*1.0 as category_121_count, nvl(t1.keyword_category_counters['vag'],0)*1.0 as category_122_count, nvl(t1.keyword_category_counters['visor'],0)*1.0 as category_123_count, nvl(t1.keyword_category_counters['yuanbotong'],0)*1.0 as category_124_count, nvl(t1.keyword_category_counters['ungrouped'],0)*1.0 as category_125_count FROM log_data_subset t1")
val featureVector = denormalized.map(row => new LabeledPoint(row.getDouble(0),Vectors.dense(row.getDouble(1), row.getDouble(2), row.getDouble(3), row.getDouble(4), row.getDouble(5), row.getDouble(6), row.getDouble(7), row.getDouble(8), row.getDouble(9), row.getDouble(10), row.getDouble(11), row.getDouble(12), row.getDouble(13), row.getDouble(14), row.getDouble(15), row.getDouble(16), row.getDouble(17), row.getDouble(18), row.getDouble(19), row.getDouble(20), row.getDouble(21), row.getDouble(22), row.getDouble(23), row.getDouble(24), row.getDouble(25), row.getDouble(26), row.getDouble(27), row.getDouble(28), row.getDouble(29), row.getDouble(30), row.getDouble(31), row.getDouble(32), row.getDouble(33), row.getDouble(34), row.getDouble(35), row.getDouble(36), row.getDouble(37), row.getDouble(38), row.getDouble(39), row.getDouble(40), row.getDouble(41), row.getDouble(42), row.getDouble(43), row.getDouble(44), row.getDouble(45), row.getDouble(46), row.getDouble(47), row.getDouble(48), row.getDouble(49), row.getDouble(50), row.getDouble(51), row.getDouble(52), row.getDouble(53), row.getDouble(54), row.getDouble(55), row.getDouble(56), row.getDouble(57), row.getDouble(58), row.getDouble(59), row.getDouble(60), row.getDouble(61), row.getDouble(62), row.getDouble(63), row.getDouble(64), row.getDouble(65), row.getDouble(66), row.getDouble(67), row.getDouble(68), row.getDouble(69), row.getDouble(70), row.getDouble(71), row.getDouble(72), row.getDouble(73), row.getDouble(74), row.getDouble(75), row.getDouble(76), row.getDouble(77), row.getDouble(78), row.getDouble(79), row.getDouble(80), row.getDouble(81), row.getDouble(82), row.getDouble(83), row.getDouble(84), row.getDouble(85), row.getDouble(86), row.getDouble(87), row.getDouble(88), row.getDouble(89), row.getDouble(90), row.getDouble(91), row.getDouble(92), row.getDouble(93), row.getDouble(94), row.getDouble(95), row.getDouble(96), row.getDouble(97), row.getDouble(98), row.getDouble(99), row.getDouble(100), row.getDouble(101), row.getDouble(102), row.getDouble(103), row.getDouble(104), row.getDouble(105), row.getDouble(106), row.getDouble(107), row.getDouble(108), row.getDouble(109), row.getDouble(110), row.getDouble(111), row.getDouble(112), row.getDouble(113), row.getDouble(114), row.getDouble(115), row.getDouble(116), row.getDouble(117), row.getDouble(118), row.getDouble(119), row.getDouble(120), row.getDouble(121), row.getDouble(122), row.getDouble(123), row.getDouble(124), row.getDouble(125), row.getDouble(126), row.getDouble(127), row.getDouble(128), row.getDouble(129), row.getDouble(130), row.getDouble(131), row.getDouble(132), row.getDouble(133), row.getDouble(134), row.getDouble(135), row.getDouble(136), row.getDouble(137), row.getDouble(138), row.getDouble(139), row.getDouble(140), row.getDouble(141), row.getDouble(142), row.getDouble(143), row.getDouble(144), row.getDouble(145), row.getDouble(146), row.getDouble(147), row.getDouble(148), row.getDouble(149), row.getDouble(150), row.getDouble(151), row.getDouble(152), row.getDouble(153), row.getDouble(154), row.getDouble(155), row.getDouble(156))))
val splits = featureVector.randomSplit(Array(0.6, 0.4), 98765L)
val training = splits(0).cache()
val test = splits(1)
val categoricalFeaturesInfo = Map[Int, Int]((4,8),(9,8),(10,8),(11,393),(12,51),(15,7),(16,22),(17,62),(18,6))

// start Logistic regression
val model = new LogisticRegressionWithLBFGS().setNumClasses(2).run(training)
model.save(sc, "hdfs:///user/hadoop/project_model")
// end Logistic regression
// // start Linear Support Vector Machines (SVMs)
// val model = SVMWithSGD.train(training, 30) // Linear Support Vector Machines (SVMs)
// DON'T USE model.clearThreshold()
// // end Linear Support Vector Machines (SVMs)
// // start DecisionTree
// val model = DecisionTree.trainClassifier(training, 2, categoricalFeaturesInfo, "gini", 5, 400)
// // end DecisionTree
// // start NaiveBayes
// val model = NaiveBayes.train(training, lambda = 1.0, modelType = "multinomial")
// // end NaiveBayes
// // start Gradient-Boosted Trees (GBTs)
// val boostingStrategy = BoostingStrategy.defaultParams("Classification")
// boostingStrategy.numIterations = 7
// boostingStrategy.treeStrategy.numClasses = 2
// boostingStrategy.treeStrategy.maxDepth = 6
// boostingStrategy.treeStrategy.maxBins = 400
// boostingStrategy.treeStrategy.categoricalFeaturesInfo = categoricalFeaturesInfo
// val model = GradientBoostedTrees.train(training, boostingStrategy)
// // end Gradient-Boosted Trees (GBTs)

val predictionAndLabels = test.map { case LabeledPoint(label, features) =>
  val prediction = model.predict(features)
  (prediction, label)
}
// Get evaluation metrics.
println("Area under ROC = " + new BinaryClassificationMetrics(predictionAndLabels).areaUnderROC())
val mcMetrics = new MulticlassMetrics(predictionAndLabels)
println("Precision = " + mcMetrics.precision)
println("ConfusionMatrix:\n" + mcMetrics.confusionMatrix)

// Save same feature vector in csv for Weka analyses
val denormalizedWeka = sqlContext.sql("SELECT hour(t1.ts_start)*1.0 + minute(t1.ts_start)/60.0 as start_time, hour(t1.ts_current)*1.0 + minute(t1.ts_current)/60.0 as current_time, hour(t1.ts_end)*1.0 + minute(t1.ts_end)/60.0 as end_time, date_format(t1.ts_end,'mmssSSS') - date_format(t1.ts_start,'mmssSSS') as time_span, date_format(t1.ts_start,'E') as weekday, t1.ad_stats.min_width, t1.ad_stats.max_width, t1.ad_stats.min_height, t1.ad_stats.max_height, concat('VISIBN',cast(t1.ad_stats.min_visibility as string)) as min_visibility, concat('VISIBX',cast(t1.ad_stats.max_visibility as string)) as max_visibility, concat('city_',cast(t1.ext_city.id as string)) as city_id, concat('state_',cast(t1.ext_city.state_id as string)) as state_id, t1.ext_city.population as city_population, t1.ext_city.area as city_area, t1.ext_user_agent.ua_type, t1.ext_user_agent.ua_family, t1.ext_user_agent.os_name, t1.ext_user_agent.device, nvl(t1.bid_counters['unknown'],0) as unknown_count, nvl(t1.bid_counters['site-impression'],0) as site_impression_count, concat('SITEIMPR',cast(nvl(t1.bid_counters['site-impression'],0) as string)) as site_impression_count_nominal, CASE WHEN nvl(t1.bid_counters['site-impression'],0)>0 THEN 'Y' ELSE 'N' END as site_impression_count_yn, nvl(t1.bid_counters['site-click'],0) as site_click_count, nvl(t1.bid_counters['site-paid'],0) as site_paid_count, nvl(t1.bid_counters['site-qk-search'],0) as site_qk_search_count, nvl(t1.bid_counters['site-full-search'],0) as site_full_search_count, nvl(t1.bid_counters['site-basket'],0) as site_basket_count, t1.ext_city.density*1.0 as city_density, 1.0*size(t1.bid_counters) as bid_counters_size, 1.0*size(t1.ad_slots) as ad_slots_size, 1.0*size(t1.keyword_category_counters) as keyword_category_counters_size, 1.0*size(t1.keyword_counters) as keyword_counters_size, nvl(t1.keyword_category_counters['accessories'],0)*1.0 as category_1_count, nvl(t1.keyword_category_counters['car'],0)*1.0 as category_2_count, nvl(t1.keyword_category_counters['honda'],0)*1.0 as category_3_count, nvl(t1.keyword_category_counters['rearview'],0)*1.0 as category_4_count, nvl(t1.keyword_category_counters['light'],0)*1.0 as category_5_count, nvl(t1.keyword_category_counters['security'],0)*1.0 as category_6_count, nvl(t1.keyword_category_counters['system'],0)*1.0 as category_7_count, nvl(t1.keyword_category_counters['hd'],0)*1.0 as category_8_count, nvl(t1.keyword_category_counters['sensor'],0)*1.0 as category_9_count, nvl(t1.keyword_category_counters['wireless'],0)*1.0 as category_10_count, nvl(t1.keyword_category_counters['display'],0)*1.0 as category_11_count, nvl(t1.keyword_category_counters['motorcycle'],0)*1.0 as category_12_count, nvl(t1.keyword_category_counters['back'],0)*1.0 as category_13_count, nvl(t1.keyword_category_counters['assorted'],0)*1.0 as category_14_count, nvl(t1.keyword_category_counters['motion'],0)*1.0 as category_15_count, nvl(t1.keyword_category_counters['buick'],0)*1.0 as category_16_count, nvl(t1.keyword_category_counters['hyundai'],0)*1.0 as category_17_count, nvl(t1.keyword_category_counters['pal'],0)*1.0 as category_18_count, nvl(t1.keyword_category_counters['wide'],0)*1.0 as category_19_count, nvl(t1.keyword_category_counters['24v'],0)*1.0 as category_20_count, nvl(t1.keyword_category_counters['auto'],0)*1.0 as category_21_count, nvl(t1.keyword_category_counters['input'],0)*1.0 as category_22_count, nvl(t1.keyword_category_counters['lcd'],0)*1.0 as category_23_count, nvl(t1.keyword_category_counters['handsfree'],0)*1.0 as category_24_count, nvl(t1.keyword_category_counters['gprs'],0)*1.0 as category_25_count, nvl(t1.keyword_category_counters['antenna'],0)*1.0 as category_26_count, nvl(t1.keyword_category_counters['bulb'],0)*1.0 as category_27_count, nvl(t1.keyword_category_counters['dvd'],0)*1.0 as category_28_count, nvl(t1.keyword_category_counters['tv'],0)*1.0 as category_29_count, nvl(t1.keyword_category_counters['audi'],0)*1.0 as category_30_count, nvl(t1.keyword_category_counters['cell'],0)*1.0 as category_31_count, nvl(t1.keyword_category_counters['720p'],0)*1.0 as category_32_count, nvl(t1.keyword_category_counters['cam'],0)*1.0 as category_33_count, nvl(t1.keyword_category_counters['code'],0)*1.0 as category_34_count, nvl(t1.keyword_category_counters['multi'],0)*1.0 as category_35_count, nvl(t1.keyword_category_counters['aux'],0)*1.0 as category_36_count, nvl(t1.keyword_category_counters['bmw'],0)*1.0 as category_37_count, nvl(t1.keyword_category_counters['chevrolet'],0)*1.0 as category_38_count, nvl(t1.keyword_category_counters['gadgets'],0)*1.0 as category_39_count, nvl(t1.keyword_category_counters['html'],0)*1.0 as category_40_count, nvl(t1.keyword_category_counters['k6000'],0)*1.0 as category_41_count, nvl(t1.keyword_category_counters['mercedes'],0)*1.0 as category_42_count, nvl(t1.keyword_category_counters['player'],0)*1.0 as category_43_count, nvl(t1.keyword_category_counters['q7'],0)*1.0 as category_44_count, nvl(t1.keyword_category_counters['rang'],0)*1.0 as category_45_count, nvl(t1.keyword_category_counters['toyota'],0)*1.0 as category_46_count, nvl(t1.keyword_category_counters['v1'],0)*1.0 as category_47_count, nvl(t1.keyword_category_counters['wired'],0)*1.0 as category_48_count, nvl(t1.keyword_category_counters['reverse'],0)*1.0 as category_49_count, nvl(t1.keyword_category_counters['video'],0)*1.0 as category_50_count, nvl(t1.keyword_category_counters['vehicle'],0)*1.0 as category_51_count, nvl(t1.keyword_category_counters['hands'],0)*1.0 as category_52_count, nvl(t1.keyword_category_counters['cmos'],0)*1.0 as category_53_count, nvl(t1.keyword_category_counters['music'],0)*1.0 as category_54_count, nvl(t1.keyword_category_counters['mirror'],0)*1.0 as category_55_count, nvl(t1.keyword_category_counters['transmitter'],0)*1.0 as category_56_count, nvl(t1.keyword_category_counters['battery'],0)*1.0 as category_57_count, nvl(t1.keyword_category_counters['ii'],0)*1.0 as category_58_count, nvl(t1.keyword_category_counters['mobile'],0)*1.0 as category_59_count, nvl(t1.keyword_category_counters['parts'],0)*1.0 as category_60_count, nvl(t1.keyword_category_counters['blue'],0)*1.0 as category_61_count, nvl(t1.keyword_category_counters['calling'],0)*1.0 as category_62_count, nvl(t1.keyword_category_counters['chip'],0)*1.0 as category_63_count, nvl(t1.keyword_category_counters['connector'],0)*1.0 as category_64_count, nvl(t1.keyword_category_counters['scan'],0)*1.0 as category_65_count, nvl(t1.keyword_category_counters['smart'],0)*1.0 as category_66_count, nvl(t1.keyword_category_counters['two'],0)*1.0 as category_67_count, nvl(t1.keyword_category_counters['water'],0)*1.0 as category_68_count, nvl(t1.keyword_category_counters['0mp'],0)*1.0 as category_69_count, nvl(t1.keyword_category_counters['crv'],0)*1.0 as category_70_count, nvl(t1.keyword_category_counters['dc'],0)*1.0 as category_71_count, nvl(t1.keyword_category_counters['ford'],0)*1.0 as category_72_count, nvl(t1.keyword_category_counters['headset'],0)*1.0 as category_73_count, nvl(t1.keyword_category_counters['ir'],0)*1.0 as category_74_count, nvl(t1.keyword_category_counters['lebosh'],0)*1.0 as category_75_count, nvl(t1.keyword_category_counters['modulator'],0)*1.0 as category_76_count, nvl(t1.keyword_category_counters['mount'],0)*1.0 as category_77_count, nvl(t1.keyword_category_counters['personal'],0)*1.0 as category_78_count, nvl(t1.keyword_category_counters['real'],0)*1.0 as category_79_count, nvl(t1.keyword_category_counters['rotating'],0)*1.0 as category_80_count, nvl(t1.keyword_category_counters['slot'],0)*1.0 as category_81_count, nvl(t1.keyword_category_counters['speed'],0)*1.0 as category_82_count, nvl(t1.keyword_category_counters['voltmeter'],0)*1.0 as category_83_count, nvl(t1.keyword_category_counters['accessoires'],0)*1.0 as category_84_count, nvl(t1.keyword_category_counters['card'],0)*1.0 as category_85_count, nvl(t1.keyword_category_counters['cigarette'],0)*1.0 as category_86_count, nvl(t1.keyword_category_counters['cleaning'],0)*1.0 as category_87_count, nvl(t1.keyword_category_counters['cold'],0)*1.0 as category_88_count, nvl(t1.keyword_category_counters['decoration'],0)*1.0 as category_89_count, nvl(t1.keyword_category_counters['definition'],0)*1.0 as category_90_count, nvl(t1.keyword_category_counters['emergency'],0)*1.0 as category_91_count, nvl(t1.keyword_category_counters['equipment'],0)*1.0 as category_92_count, nvl(t1.keyword_category_counters['european'],0)*1.0 as category_93_count, nvl(t1.keyword_category_counters['film'],0)*1.0 as category_94_count, nvl(t1.keyword_category_counters['foldable'],0)*1.0 as category_95_count, nvl(t1.keyword_category_counters['fuse'],0)*1.0 as category_96_count, nvl(t1.keyword_category_counters['golf'],0)*1.0 as category_97_count, nvl(t1.keyword_category_counters['gs8000l'],0)*1.0 as category_98_count, nvl(t1.keyword_category_counters['hatchback'],0)*1.0 as category_99_count, nvl(t1.keyword_category_counters['head'],0)*1.0 as category_100_count, nvl(t1.keyword_category_counters['hot'],0)*1.0 as category_101_count, nvl(t1.keyword_category_counters['interior'],0)*1.0 as category_102_count, nvl(t1.keyword_category_counters['ios'],0)*1.0 as category_103_count, nvl(t1.keyword_category_counters['mitsubishi'],0)*1.0 as category_104_count, nvl(t1.keyword_category_counters['navigation'],0)*1.0 as category_105_count, nvl(t1.keyword_category_counters['plastic'],0)*1.0 as category_106_count, nvl(t1.keyword_category_counters['power'],0)*1.0 as category_107_count, nvl(t1.keyword_category_counters['products'],0)*1.0 as category_108_count, nvl(t1.keyword_category_counters['realtime'],0)*1.0 as category_109_count, nvl(t1.keyword_category_counters['red'],0)*1.0 as category_110_count, nvl(t1.keyword_category_counters['repair'],0)*1.0 as category_111_count, nvl(t1.keyword_category_counters['samsung'],0)*1.0 as category_112_count, nvl(t1.keyword_category_counters['side'],0)*1.0 as category_113_count, nvl(t1.keyword_category_counters['skoda'],0)*1.0 as category_114_count, nvl(t1.keyword_category_counters['speaker'],0)*1.0 as category_115_count, nvl(t1.keyword_category_counters['stickers'],0)*1.0 as category_116_count, nvl(t1.keyword_category_counters['strobe'],0)*1.0 as category_117_count, nvl(t1.keyword_category_counters['subaru'],0)*1.0 as category_118_count, nvl(t1.keyword_category_counters['switch'],0)*1.0 as category_119_count, nvl(t1.keyword_category_counters['theft'],0)*1.0 as category_120_count, nvl(t1.keyword_category_counters['trail'],0)*1.0 as category_121_count, nvl(t1.keyword_category_counters['vag'],0)*1.0 as category_122_count, nvl(t1.keyword_category_counters['visor'],0)*1.0 as category_123_count, nvl(t1.keyword_category_counters['yuanbotong'],0)*1.0 as category_124_count, nvl(t1.keyword_category_counters['ungrouped'],0)*1.0 as category_125_count, CASE WHEN nvl(t1.bid_counters['site-search'],0)>0 THEN 'Y' ELSE 'N' END as site_search FROM log_data_subset t1")
denormalizedWeka.rdd.saveAsTextFile("hdfs://sandbox.hortonworks.com:8020/user/hadoop/weka2")
